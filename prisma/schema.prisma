generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

model User {
  id String @id @default(uuid())

  email           String       @unique
  password        String
  username        String       @unique
  displayName     String       @map("display_name")
  avatar          String?
  bio             String?
  isVerified      Boolean      @default(false) @map("is_verified")
  isEmailVerified Boolean      @default(false) @map("is_email_verified")
  isTotpEnabled   Boolean      @default(false) @map("is_totp_enabled")
  isDeactivated   Boolean      @default(false) @map("is_deactivated")
  deactivatedAt   DateTime?    @map("deactivated_at")
  totpSecret      String?      @map("totp_secret")
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")
  tokens          Token[]
  socialLinks     SocialLink[]
  stream          Stream?

  @@map("users")
}

model SocialLink {
  id String @id @default(uuid())

  title    String
  position Int
  url      String

  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?  @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("social_links")
}

model Stream {
  id String @id @default(uuid())

  title        String
  thumbnailUrl String? @map("thumbnail_url")

  ingressId String? @unique @map("ingress_id")
  serverUrl String? @map("server_url")
  streamKey String? @map("stream_key")

  isLive                     Boolean  @default(false) @map("is_live")
  isChatEnabled              Boolean  @default(true) @map("is_chat_enabled")
  isChatFollowersOnly        Boolean  @default(false) @map("is_chat_followers_only")
  isChatPremiumFollowersOnly Boolean  @default(false) @map("is_chat_premium_followers_only")
  user                       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                     String?  @unique @map("user_id")
  createdAt                  DateTime @default(now()) @map("created_at")
  updatedAt                  DateTime @updatedAt @map("updated_at")
}

model Token {
  id String @id @default(uuid())

  token     String    @unique
  type      TokenType
  expiresIn DateTime  @map("expires_in")

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("tokens")
}

enum TokenType {
  EMAIL_VERIFY
  PASSWORD_RESET
  DEACTIVATE_ACCOUNT
  TELEGRAM_AUTH

  @@map("token_types")
}
